rdyp = Output(15)
en3 = Output(12)
bluetooth = Bluetooth("test-brain")
can = Can(32, 33, 1000000)
l0 = ODriveMotor(can, 0)
r0 = ODriveMotor(can, 512)
l1 = ODriveMotor(can, 256)
r1 = ODriveMotor(can, 768)
l0.m_per_tick = 0.05567092651757189
r0.m_per_tick = 0.05567092651757189
l1.m_per_tick = 0.05567092651757189
r1.m_per_tick = 0.05567092651757189
l0.reversed = false
r0.reversed = true
l1.reversed = false
r1.reversed = true
wheels = ODriveWheels(l0, r0)
wheels_front = ODriveWheels(l1, r1)
wheels.width = 0.47
wheels_front.width = 0.47
wheels.shadow(wheels_front)

serial = Serial(26, 27, 115200, 1)
p0 = Expander(serial, 25, 14)
y_axis_motor = StepperMotor(5, 4)
y_axis_alarm = Input(13)
y_axis_end_l = p0.Input(21)
y_axis_end_r = p0.Input(19)
y_axis = MotorAxis(y_axis_motor, y_axis_end_r, y_axis_end_l)

tornado_z = ODriveMotor(can, 1280)
tornado_turn = ODriveMotor(can, 1024)
tornado_z.m_per_tick = 0.0019968051118210866
tornado_turn.m_per_tick = 0.07987220447284345
tornado_z.limits(1.0, 30)
tornado_turn.limits(1.0, 30)
tornado_z.reversed = true
tornado_turn.reversed = true

tornado_end_top = p0.Input(32)
tornado_end_bottom = p0.Input(5)
tornado_ref_motor = p0.Input(33)
tornado_ref_gear = p0.Input(4)
tornado_ref_t = p0.Input(35)
tornado_ref_b = p0.Input(18)

bool tornado_z_is_referencing = false;
bool tornado_end_top_enabled = true;
bool tornado_end_bottom_enabled = true;
when tornado_end_top_enabled and tornado_z_is_referencing and tornado_end_top.level == 0 then
    tornado_z.speed(0);
    tornado_end_top_enabled = false;
end
when !tornado_end_top_enabled and tornado_z_is_referencing and tornado_end_top.level == 1 then
    tornado_z.speed(0);
    tornado_end_top_enabled = true;
end
when tornado_end_bottom_enabled and tornado_end_bottom.level == 0 then
    tornado_z.speed(0);
end

bool tornado_turn_is_referencing = false;
bool tornado_ref_motor_enabled = false;
bool tornado_ref_gear_enabled = false;
when tornado_ref_motor_enabled and tornado_turn_is_referencing and tornado_ref_motor.level == 0 then
    tornado_turn.speed(0);
    tornado_ref_motor_enabled = false;
end

when tornado_ref_gear_enabled and tornado_turn_is_referencing and tornado_ref_gear.level == 1 then
    tornado_turn.speed(0);
    tornado_ref_gear_enabled = false;
end

bool tornado_ref_t_enabled = false;
bool tornado_ref_b_enabled = false;

when tornado_ref_t_enabled and tornado_ref_t.level == 1 then
    en3.off();
end

when tornado_ref_b_enabled and tornado_ref_b.level == 1 then
    tornado_z.speed(0);
end



flashlight = p0.PwmOutput(2)
flashlight.duty = 20

bms = p0.Serial(26, 27, 9600, 2)
bms.unmute()

estop_1 = Input(34)
estop_2 = Input(35)
battery_control_reset = p0.Output(15)
battery_control_status = p0.Input(13)

let stop do wheels.speed(0, 0); y_axis.stop();tornado_z.speed(0);tornado_turn.speed(0); flashlight.off();end
when estop_1.level == 0 then stop(); end
when estop_2.level == 0 then stop(); end
when tornado_ref_t.level == 1 then wheels.speed(0, 0); y_axis.stop(); end
when tornado_end_bottom.level == 0 then wheels.speed(0, 0); y_axis.stop(); end
when core.last_message_age > 1000 then wheels.speed(0, 0); end
when core.last_message_age > 20000 then stop(); end

core.output("core.millis core.heap wheels.linear_speed:3 wheels.angular_speed:3 y_axis_end_l.level y_axis_end_r.level y_axis_motor.idle y_axis_motor.position y_axis_alarm.level tornado_end_top.level tornado_end_bottom.level tornado_ref_motor.level tornado_ref_gear.level tornado_ref_t.level tornado_ref_b.level tornado_z.position tornado_turn.position estop_1.level estop_2.level battery_control_status.level")
rdyp.on()
en3.on()